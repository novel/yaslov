#!/usr/bin/env python

import argparse
import locale
import os
import sys

import termcolor

from yasl.cache import Cache
from yasl.config import Config
from yasl.dict import YaslovDict
import yasl.utils

system_encoding = locale.getpreferredencoding()


def get_argparser():
    parser = argparse.ArgumentParser(
            description='CLI client for slovari.yandex.ru',
            epilog='send bug reports to: bogorodskiy@gmail.com')
    parser.add_argument('-G', dest='color',
                        default=False, action='store_true',
                        help="enable colors")
    parser.add_argument('-c', dest='config_file')
    parser.add_argument('-l', dest='lang',
            help='translation direction, for example "en-ru"'),
    parser.add_argument('-n', dest='use_cache',
            default=True, action='store_false',
            help="do not use cache")
    parser.add_argument('term', nargs='+',
            help='a term to translate')

    return parser


if __name__ == "__main__":
    args = get_argparser().parse_args()

    if args.config_file:
        config_file = args.config_file
    else:
        config_file = yasl.utils.default_config_path()

    try:
        conf = Config(config_file)
    except Exception as e:
        print(e.message)
        sys.exit(1)

    lang = None
    if args.lang:
        lang = args.lang
    else:
        if conf.lang:
            lang = conf.lang
        else:
            print ("Error: translation direction was not specified. "
                   "Please either use the '-l' option or define "
                   "'default_lang' in the translation section in the config file")

            sys.exit(1)

    yadict = YaslovDict(key=conf.api_key, lang=lang)

    term = " ".join(args.term).decode(system_encoding)

    if args.use_cache:
        cache = Cache()
        output = cache.find(term)

        if not output:
            output = yadict.lookup(term)
            if 0 == len(output):
                print "No translations found."
                sys.exit(1)
            cache.add(term, output)

        cache.update(term)
    else:
        output = yadict.lookup(term)

    if args.color or conf.color:
        output = output.replace(term, termcolor.colored(term, 'red'))
    print output.encode(system_encoding)
